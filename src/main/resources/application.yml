server:
    port: 9000
    netty:
        connection-timeout: 2s
        idle-timeout: 15s
    shutdown: graceful

spring:
    security:
        oauth2:
            client:
                registration:
                    keycloak:
                        client-id: edge-service
                        client-secret: polar-keycloak-secret
                        scope:
                            - openid
                            - roles
                    slack:
                        client-id: '123'
                        client-secret: '123'
                        scope:
                            - openid
                            - profile
                            - email
                        authorization-grant-type: authorization_code
                        redirect-uri: "https://tony97.io.vn/login/oauth2/code/slack"
                        client-name: slack
                        provider: slack
                provider:
                    slack:
                        authorization-uri: 'https://slack.com/openid/connect/authorize'
                        token-uri: 'https://slack.com/api/openid.connect.token'
                        user-info-uri: 'https://slack.com/api/openid.connect.userInfo'
                        user-name-attribute: name
                        jwk-set-uri: 'https://slack.com/openid/connect/keys'
                    keycloak:
                        issuer-uri: ${KEYCLOAK_ISSUER_URL:http://localhost:8080/realms/PolarBookshop}
    config:
        import: 'optional:configserver:'
    application:
        name: edge-service
    lifecycle:
        timeout-per-shutdown-phase: 15s
    session:
        store-type: redis
        timeout: 10m
        redis:
            namespace: polar:edge
    cloud:
        config:
            fail-fast: false # In production, set to true
            retry:
                max-attempts: 5
                initial-interval: 1000
                max-interval: 2000
                multiplier: 1.1
            request-connect-timeout: 5000
            request-read-timeout: 5000
            uri: http://localhost:8888

        gateway:
            routes:
                -   id: catalog-route
                    uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
                    predicates:
                        - Path=/books/**
                    filters:
                        -   name: CircuitBreaker
                            args:
                                name: catalogCircuitBreaker
                                fallbackUri: forward:/catalog-fallback
                -   id: order-route
                    uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
                    predicates:
                        - Path=/orders/**
                    filters:
                        -   name: CircuitBreaker
                            args:
                                name: orderCircuitBreaker
                -   id: spa-route
                    uri: ${SPA_URL:http://localhost:9004}
                    predicates:
                        - Path=/,/*.css,/*.js,/favicon.ico
            httpclient:
                connect-timeout: 2000
                response-timeout: 5s
                pool:
                    type: elastic
                    max-idle-time: 15s
                    max-life-time: 60s
            default-filters:
                -   name: Retry
                    args:
                        retries: 3
                        method: GET
                        series: SERVER_ERROR
                        exceptions: java.io.IOException, java.util.concurrent.TimeoutException
                        backoff:
                            firstBackoff: 50ms
                            maxBackoff: 500ms
                            factor: 2
                            basedOnPreviousValue: false
                -   name: RequestRateLimiter
                    args:
                        redis-rate-limiter:
                            replenishRate: 10
                            burstCapacity: 20
                            requestedTokens: 1
                - SaveSession
                - TokenRelay
    data:
        redis:
            host: localhost
            port: 6379
            connect-timeout: 2s
            timeout: 1s
resilience4j:
    circuitbreaker:
        configs:
            default:
                sliding-window-size: 20
                permitted-number-of-calls-in-half-open-state: 5
                failure-rate-threshold: 50
                wait-duration-in-open-state: 15000
    timelimiter:
        configs:
            default:
                timeout-duration: 5s
management:
    endpoints:
        web:
            exposure:
                include:
                    - configprops
                    - refresh
                    - health
                    - metrics
                    - prometheus
                    - sessions
                    - flyway
                    - info
                    - heapdump
    info:
        env:
            enabled: true
        java:
            enabled: true
        os:
            enabled: true
        process:
            enabled: true
        ssl:
            enabled: true
        git:
            enabled: true
        build:
            enabled: true
        defaults:
            enabled: true

    endpoint:
        health:
            show-components: always
            show-details: always
            probes:
                enabled: true
            group:
                readiness:
                    include:
                        - readinessState
                liveness:
                    include:
                        - livenessState
    metrics:
        tags:
            application: ${spring.application.name}
logging:
    level:
        io.github.resilience4j: DEBUG
    pattern:
        level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"